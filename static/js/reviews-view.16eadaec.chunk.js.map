{"version":3,"sources":["views/Reviews.js"],"names":["Reviews","movieId","useState","review","setReview","useEffect","fetchReviews","then","response","results","console","log","length","map","className","s","authorReviews","author","content","id","text"],"mappings":"2OAKe,SAASA,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KASA,OAPAC,qBAAU,WACRC,YAAaL,GAASM,MAAK,SAACC,GAC1BJ,EAAUI,EAASC,SACnBC,QAAQC,IAAIP,QAEb,CAACH,IAGF,mCACGE,EAAOS,OAAS,EACf,6BACGT,EAAOU,KAAI,SAACV,GAAD,OACV,+BACE,oBAAIW,UAAWC,IAAEC,cAAjB,SAAiCb,EAAOc,SACxC,4CAAed,EAAOe,aAFff,EAAOgB,SAOpB,mBAAGL,UAAWC,IAAEK,KAAhB","file":"static/js/reviews-view.16eadaec.chunk.js","sourcesContent":["import { fetchReviews } from \"../services/ApiMovies\";\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Views.module.css\";\n\nexport default function Reviews({ movieId }) {\n  const [review, setReview] = useState([]);\n\n  useEffect(() => {\n    fetchReviews(movieId).then((response) => {\n      setReview(response.results);\n      console.log(setReview);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {review.length > 0 ? (\n        <ul>\n          {review.map((review) => (\n            <li key={review.id}>\n              <h3 className={s.authorReviews}>{review.author}</h3>\n              <p>Character: {review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={s.text}>We don't have any reviews for this movie </p>\n      )}\n    </>\n  );\n}\n\nReviews.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n"],"sourceRoot":""}